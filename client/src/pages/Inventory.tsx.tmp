import React, { useState, useEffect } from 'react';
import { Package, Plus, Search, Edit, Trash2, Eye, AlertTriangle, ShoppingCart, DollarSign } from 'lucide-react';
import { apiClient } from '../services/apiClient';
import './Inventory.css';

interface InventoryItem {
  id: number;
  product_code: string;
  name: string;
  description?: string;
  selling_price: number;
  purchase_price?: number;
  purchase_value?: number;
  quantity_in_stock: number;
  unit_type: string;
  availability: 'available' | 'out_of_stock' | 'discontinued';
  image_url?: string;
  is_unlimited: boolean;
  is_premium: boolean;
  created_at: string;
  updated_at: string;
  category_name?: string;
  category_id?: number;
}

interface Category {
  id: number;
  name: string;
  description?: string;
  sort_order: number;
}

interface InventoryStats {
  total_items: number;
  total_value: number;
  low_stock: number;
  out_of_stock: number;
}

const Inventory: React.FC = () => {
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [stats, setStats] = useState<InventoryStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [availabilityFilter, setAvailabilityFilter] = useState<string>('all');
  const [showAddModal, setShowAddModal] = useState(false);
  // const [selectedImage, setSelectedImage] = useState<File | null>(null); // For future image upload implementation
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);
  const [formData, setFormData] = useState({
    product_code: '',
    name: '',
    description: '',
    category_id: '',
    selling_price: '',
    purchase_price: '',
    quantity_in_stock: '',
    unit_type: 'piece',
    availability: 'available',
    is_unlimited: false,
    is_premium: false
  });

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);

  useEffect(() => {
    fetchInventoryData();
    
    // Check for search parameter in URL
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    if (searchParam) {
      setSearchTerm(searchParam);
    }
  }, []);

  const fetchInventoryData = async () => {
    try {
      setLoading(true);
      console.log('Fetching inventory data...');
      
      const [itemsResponse, categoriesResponse, statsResponse] = await Promise.all([
        apiClient.get('/inventory/items'),
        apiClient.get('/inventory/categories'),
        apiClient.get('/inventory/stats')
      ]);

      console.log('Items response:', itemsResponse.data);
      console.log('Categories response:', categoriesResponse.data);
      console.log('Stats response:', statsResponse.data);

      if (itemsResponse.data.success) {
        setItems(itemsResponse.data.data);
      }
      if (categoriesResponse.data.success) {
        setCategories(categoriesResponse.data.data);
      }
      if (statsResponse.data.success) {
        const statsData = statsResponse.data.data;
        setStats({
          total_items: Number(statsData.total_items) || 0,
          total_value: Number(statsData.total_value) || 0,
          low_stock: Number(statsData.low_stock) || 0,
          out_of_stock: Number(statsData.out_of_stock) || 0
        });
      }
    } catch (error: any) {
      console.error('Error fetching inventory data:', error);
      console.error('Error details:', error.response?.data);
    } finally {
      setLoading(false);
    }
  };

  const handleAddProduct = async () => {
    try {
      // Validate required fields
      if (!formData.name.trim()) {
        alert('Product name is required');
        return;
      }
      if (!formData.product_code.trim()) {
        alert('Product code is required');
        return;
      }
      if (!formData.category_id) {
        alert('Category is required');
        return;
      }
      if (!formData.selling_price || parseFloat(formData.selling_price) <= 0) {
        alert('Valid selling price is required');
        return;
      }

      const productData = {
        product_code: formData.product_code.trim(),
        name: formData.name.trim(),
        description: formData.description.trim() || null,
        category_id: parseInt(formData.category_id),
        selling_price: parseFloat(formData.selling_price),
        purchase_price: formData.purchase_price ? parseFloat(formData.purchase_price) : null,
        quantity_in_stock: formData.quantity_in_stock ? parseInt(formData.quantity_in_stock) : 0,
        unit_type: formData.unit_type || 'piece',
        availability: formData.availability || 'available',
        image_url: null, // Set to null for now
        is_unlimited: Boolean(formData.is_unlimited),
        is_premium: Boolean(formData.is_premium)
      };

      console.log('Sending product data:', productData);

      const response = await apiClient.post('/inventory/items', productData);
      
      console.log('Add product response:', response.data);
      
      if (response.data.success) {
        alert('Product added successfully!');
        setShowAddModal(false);
        resetForm();
        fetchInventoryData(); // Refresh the list
      } else {
        throw new Error(response.data.message || 'Failed to add product');
      }
    } catch (error: any) {
      console.error('Error adding product:', error);
      console.error('Error response:', error.response?.data);
      
      let errorMessage = 'Failed to add product. Please try again.';
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      alert(errorMessage);
    }
  };

  const resetForm = () => {
    setFormData({
      product_code: '',
      name: '',
      description: '',
      category_id: '',
      selling_price: '',
      purchase_price: '',
      quantity_in_stock: '',
      unit_type: 'piece',
      availability: 'available',
      is_unlimited: false,
      is_premium: false
    });
    // setSelectedImage(null);
    setImagePreview(null);
    const input = document.getElementById('image-upload') as HTMLInputElement;
    if (input) input.value = '';
  };

  // Action handlers for View, Edit, Delete
  const handleViewItem = (item: InventoryItem) => {
    setSelectedItem(item);
    setShowViewModal(true);
  };

  const handleEditItem = (item: InventoryItem) => {
    setSelectedItem(item);
    setFormData({
      product_code: item.product_code,
      name: item.name,
      description: item.description || '',
      category_id: item.category_id?.toString() || '',
      selling_price: item.selling_price.toString(),
      purchase_price: item.purchase_price?.toString() || '',
      quantity_in_stock: item.quantity_in_stock.toString(),
      unit_type: item.unit_type,
      availability: item.availability,
      is_unlimited: item.is_unlimited,
      is_premium: item.is_premium
    });
    setShowEditModal(true);
  };

  const handleDeleteItem = async (item: InventoryItem) => {
    if (window.confirm(`Are you sure you want to delete "${item.name}"? This action cannot be undone.`)) {
      try {
        const response = await apiClient.delete(`/inventory/items/${item.id}`);
        if (response.data.success) {
          alert('Product deleted successfully!');
          fetchInventoryData(); // Refresh the list
        }
      } catch (error: any) {
        console.error('Error deleting product:', error);
        alert('Failed to delete product. Please try again.');
      }
    }
  };

  const handleUpdateProduct = async () => {
    if (!selectedItem) return;

    try {
      const productData = {
        ...formData,
        category_id: parseInt(formData.category_id),
        selling_price: parseFloat(formData.selling_price),
        purchase_price: formData.purchase_price ? parseFloat(formData.purchase_price) : null,
        quantity_in_stock: formData.quantity_in_stock ? parseInt(formData.quantity_in_stock) : 0
      };

      const response = await apiClient.put(`/inventory/items/${selectedItem.id}`, productData);
      
      if (response.data.success) {
        alert('Product updated successfully!');
        setShowEditModal(false);
        resetForm();
        setSelectedItem(null);
        fetchInventoryData(); // Refresh the list
      }
    } catch (error: any) {
      console.error('Error updating product:', error);
      const errorMessage = error.response?.data?.message || error.message || 'Failed to update product. Please try again.';
      alert(errorMessage);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      setFormData(prev => ({
        ...prev,
        [name]: (e.target as HTMLInputElement).checked
      }));
    } else if (type === 'number') {
      // Handle number inputs specially to allow empty strings
      setFormData(prev => ({
        ...prev,
        [name]: value === '' ? '' : value
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Check if file is an image
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }
      
      // Check file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('Image size must be less than 5MB');
        return;
      }

      // setSelectedImage(file); // For future implementation
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const triggerImageSelect = () => {
    const input = document.getElementById('image-upload') as HTMLInputElement;
    input?.click();
  };

  const removeImage = () => {
    // setSelectedImage(null);
    setImagePreview(null);
    const input = document.getElementById('image-upload') as HTMLInputElement;
    if (input) input.value = '';
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    const files = e.dataTransfer.files;
    if (files && files[0]) {
      const file = files[0];
      
      // Check if file is an image
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }
      
      // Check file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('Image size must be less than 5MB');
        return;
      }

      // setSelectedImage(file); // For future implementation
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const filteredItems = items.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.product_code.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesCategory = selectedCategory === 'all' || 
                           (item.category_id && item.category_id.toString() === selectedCategory);
    
    const matchesAvailability = availabilityFilter === 'all' || item.availability === availabilityFilter;
    
    return matchesSearch && matchesCategory && matchesAvailability;
  });

  // Pagination calculations
  const totalItems = filteredItems.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentItems = filteredItems.slice(startIndex, endIndex);

  // Pagination handlers
  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handleItemsPerPageChange = (newItemsPerPage: number) => {
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1); // Reset to first page when changing items per page
  };

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, selectedCategory, availabilityFilter]);

  const formatCurrency = (amount: number | null | undefined) => {
    if (amount === null || amount === undefined || isNaN(Number(amount))) {
      return '₱0.00';
    }
    return `₱${Number(amount).toFixed(2)}`;
  };

  const getAvailabilityColor = (availability: string) => {
    switch (availability) {
      case 'available': return '#4CAF50';
      case 'out_of_stock': return '#F44336';
      case 'discontinued': return '#9E9E9E';
      default: return '#9E9E9E';
    }
  };

  const getStockStatus = (item: InventoryItem) => {
    if (item.is_unlimited) return 'unlimited';
    if (item.quantity_in_stock === 0) return 'out_of_stock';
    if (item.quantity_in_stock <= 10) return 'low_stock';
    return 'in_stock';
  };

  const getStockStatusColor = (status: string) => {
    switch (status) {
      case 'unlimited': return '#2196F3';
      case 'in_stock': return '#4CAF50';
      case 'low_stock': return '#FF9800';
      case 'out_of_stock': return '#F44336';
      default: return '#9E9E9E';
    }
  };

  const getStockStatusText = (status: string) => {
    switch (status) {
      case 'unlimited': return 'Unlimited';
      case 'in_stock': return 'In Stock';
      case 'low_stock': return 'Low Stock';
      case 'out_of_stock': return 'Out of Stock';
      default: return 'Unknown';
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading inventory data...</p>
      </div>
    );
  }

  return (
    <div className="inventory-page">
      <div className="page-header">
        <h1>Inventory</h1>
        <div className="header-actions">
          <div className="search-bar">
            <Search size={20} />
            <input
              type="text"
              placeholder="Search products..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <select 
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Categories</option>
            {categories.map(category => (
              <option key={category.id} value={category.id.toString()}>
                {category.name}
              </option>
            ))}
          </select>
          <select 
            value={availabilityFilter}
            onChange={(e) => setAvailabilityFilter(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Status</option>
            <option value="available">Available</option>
            <option value="out_of_stock">Out of Stock</option>
            <option value="discontinued">Discontinued</option>
          </select>
          <button className="add-btn" onClick={() => setShowAddModal(true)}>
            <Plus size={20} />
            Add Product
          </button>
        </div>
      </div>

      {}
      {stats && (
        <div className="stats-container">
          <div className="stat-card">
            <div className="stat-icon">
              <Package size={24} />
            </div>
            <div className="stat-content">
              <h3>{stats.total_items}</h3>
              <p>Total Products</p>
              <span className="stat-change">Last 7 days</span>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">
              <DollarSign size={24} />
            </div>
            <div className="stat-content">
              <h3>{formatCurrency(stats.total_value)}</h3>
              <p>Total Revenue</p>
              <span className="stat-change">From Sales</span>
            </div>
          </div>

          <div className="stat-card warning">
            <div className="stat-icon">
              <AlertTriangle size={24} />
            </div>
            <div className="stat-content">
              <h3>{stats.low_stock}</h3>
              <p>Low Stock</p>
              <span className="stat-change">≤10 items</span>
            </div>
          </div>

          <div className="stat-card danger">
            <div className="stat-icon">
              <ShoppingCart size={24} />
            </div>
            <div className="stat-content">
              <h3>{stats.out_of_stock}</h3>
              <p>Out of Stock</p>
              <span className="stat-change">0 items</span>
            </div>
          </div>
        </div>
      )}

      {}
      <div className="products-container">
        <div className="products-header">
          <h3>Products</h3>
        </div>

        <div className="products-table-container">
          <table className="products-table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Buying Price</th>
                <th>Quantity</th>
                <th>Threshold Value</th>
                <th>Expiry Date</th>
                <th>Availability</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {currentItems.map((item) => {
                const stockStatus = getStockStatus(item);
                return (
                  <tr key={item.id}>
                    <td>
                      <div className="product-info">
                        <div className="product-image">
                          {item.image_url ? (
                            <img src={item.image_url} alt={item.name} />
                          ) : (
                            // Show different placeholder based on product type
                            <div className="product-placeholder">
                              {item.name.toLowerCase().includes('set') ? (
                                <div className="product-icon set">SET</div>
                              ) : item.name.toLowerCase().includes('pork') ? (
                                <div className="product-icon pork">🥓</div>
                              ) : item.name.toLowerCase().includes('chicken') ? (
                                <div className="product-icon chicken">🍗</div>
                              ) : item.name.toLowerCase().includes('beef') ? (
                                <div className="product-icon beef">🥩</div>
                              ) : item.name.toLowerCase().includes('cheese') ? (
                                <div className="product-icon cheese">🧀</div>
                              ) : item.name.toLowerCase().includes('kimchi') ? (
                                <div className="product-icon kimchi">🥬</div>
                              ) : item.name.toLowerCase().includes('potato') ? (
                                <div className="product-icon potato">🥔</div>
                              ) : item.name.toLowerCase().includes('fish') ? (
                                <div className="product-icon fish">🐟</div>
                              ) : item.name.toLowerCase().includes('egg') ? (
                                <div className="product-icon egg">🥚</div>
                              ) : (
                                <Package size={20} />
                              )}
                            </div>
                          )}
                        </div>
                        <div className="product-details">
                          <h4>{item.name}</h4>
                          <p>{item.product_code}</p>
                          <span className="product-category">{item.category_name}</span>
                        </div>
                      </div>
                    </td>
                    <td>{formatCurrency(item.selling_price)}</td>
                    <td>
                      <div className="quantity-info">
                        <span className="quantity">
                          {item.is_unlimited ? '∞' : `${item.quantity_in_stock} ${item.unit_type}`}
                        </span>
                        <span 
                          className="stock-status"
                          style={{ backgroundColor: getStockStatusColor(stockStatus) }}
                        >
                          {getStockStatusText(stockStatus)}
                        </span>
                      </div>
                    </td>
                    <td>
                      {item.is_unlimited ? '-' : `${Math.max(1, Math.floor(item.quantity_in_stock * 0.2))} ${item.unit_type}`}
                    </td>
                    <td>-</td>
                    <td>
                      <span 
                        className="availability-badge"
                        style={{ backgroundColor: getAvailabilityColor(item.availability) }}
                      >
                        {item.availability === 'available' ? 'In-stock' : 
                         item.availability === 'out_of_stock' ? 'Out of stock' : 'Discontinued'}
                      </span>
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button 
                          className="action-btn view" 
                          title="View"
                          onClick={() => handleViewItem(item)}
                        >
                          <Eye size={14} />
                        </button>
                        <button 
                          className="action-btn edit" 
                          title="Edit"
                          onClick={() => handleEditItem(item)}
                        >
                          <Edit size={14} />
                        </button>
                        <button 
                          className="action-btn delete" 
                          title="Delete"
                          onClick={() => handleDeleteItem(item)}
                        >
                          <Trash2 size={14} />
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          {filteredItems.length === 0 && (
            <div className="empty-state">
              <Package size={48} />
              <p>No products found</p>
            </div>
          )}
        </div>

        {}
        {filteredItems.length > 0 && (
          <div className="table-pagination">
            <div className="pagination-info">
              <span>
                Showing {startIndex + 1} to {Math.min(endIndex, totalItems)} of {totalItems} results
              </span>
              <select 
                value={itemsPerPage} 
                onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}
                className="items-per-page-select"
              >
                <option value={5}>5 per page</option>
                <option value={10}>10 per page</option>
                <option value={25}>25 per page</option>
                <option value={50}>50 per page</option>
              </select>
            </div>
            <div className="pagination-controls">
              <button 
                onClick={handlePreviousPage}
                disabled={currentPage === 1}
                className="pagination-btn"
              >
                Previous
              </button>
              
              {}
              <div className="page-numbers">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNumber: number;
                  if (totalPages <= 5) {
                    pageNumber = i + 1;
                  } else if (currentPage <= 3) {
                    pageNumber = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNumber = totalPages - 4 + i;
                  } else {
                    pageNumber = currentPage - 2 + i;
                  }
                  
                  return (
                    <button
                      key={pageNumber}
                      onClick={() => handlePageChange(pageNumber)}
                      className={`page-number ${currentPage === pageNumber ? 'active' : ''}`}
                    >
                      {pageNumber}
                    </button>
                  );
                })}
              </div>

              <button 
                onClick={handleNextPage}
                disabled={currentPage === totalPages}
                className="pagination-btn"
              >
                Next
              </button>
            </div>
          </div>
        )}
      </div>

      {}
      {showAddModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h2>Add Menu Items</h2>
              <button className="close-btn" onClick={() => { setShowAddModal(false); resetForm(); }}>×</button>
            </div>
            
            <form className="add-product-form" onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
              {}
              <input
                type="file"
                id="image-upload"
                accept="image}
      {showViewModal && selectedItem && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h2>View Product Details</h2>
              <button className="close-btn" onClick={() => { setShowViewModal(false); setSelectedItem(null); }}>×</button>
            </div>
            
            <div className="view-product-details">
              <div className="view-section">
                <div className="image-section">
                  {selectedItem.image_url ? (
                    <img src={selectedItem.image_url} alt={selectedItem.name} className="product-image-large" />
                  ) : (
                    <div className="product-placeholder-large">
                      <Package size={80} />
                    </div>
                  )}
                </div>

                <div className="details-grid">
                  <div className="detail-item">
                    <label>Product Code:</label>
                    <span>{selectedItem.product_code}</span>
                  </div>

                  <div className="detail-item">
                    <label>Name:</label>
                    <span>{selectedItem.name}</span>
                  </div>

                  <div className="detail-item">
                    <label>Description:</label>
                    <span>{selectedItem.description || 'No description'}</span>
                  </div>

                  <div className="detail-item">
                    <label>Category:</label>
                    <span>{selectedItem.category_name}</span>
                  </div>

                  <div className="detail-item">
                    <label>Selling Price:</label>
                    <span>{formatCurrency(selectedItem.selling_price)}</span>
                  </div>

                  <div className="detail-item">
                    <label>Purchase Price:</label>
                    <span>{formatCurrency(selectedItem.purchase_price)}</span>
                  </div>

                  <div className="detail-item">
                    <label>Quantity in Stock:</label>
                    <span>
                      {selectedItem.is_unlimited ? 'Unlimited' : `${selectedItem.quantity_in_stock} ${selectedItem.unit_type}`}
                    </span>
                  </div>

                  <div className="detail-item">
                    <label>Unit Type:</label>
                    <span>{selectedItem.unit_type}</span>
                  </div>

                  <div className="detail-item">
                    <label>Availability:</label>
                    <span className={`status-badge ${selectedItem.availability}`}>
                      {selectedItem.availability === 'available' ? 'Available' : 
                       selectedItem.availability === 'out_of_stock' ? 'Out of Stock' : 'Discontinued'}
                    </span>
                  </div>

                  <div className="detail-item">
                    <label>Type:</label>
                    <div className="badges">
                      {selectedItem.is_unlimited && <span className="badge unlimited">Unlimited</span>}
                      {selectedItem.is_premium && <span className="badge premium">Premium</span>}
                    </div>
                  </div>

                  <div className="detail-item">
                    <label>Created:</label>
                    <span>{new Date(selectedItem.created_at).toLocaleDateString()}</span>
                  </div>

                  <div className="detail-item">
                    <label>Last Updated:</label>
                    <span>{new Date(selectedItem.updated_at).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>

              <div className="modal-actions">
                <button 
                  type="button" 
                  className="edit-btn" 
                  onClick={() => { 
                    setShowViewModal(false); 
                    handleEditItem(selectedItem); 
                  }}
                >
                  Edit Product
                </button>
                <button 
                  type="button" 
                  className="close-modal-btn" 
                  onClick={() => { setShowViewModal(false); setSelectedItem(null); }}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {}
      {showEditModal && selectedItem && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h2>Edit Product</h2>
              <button className="close-btn" onClick={() => { setShowEditModal(false); setSelectedItem(null); resetForm(); }}>×</button>
            </div>
            
            <form className="add-product-form" onSubmit={(e) => { e.preventDefault(); handleUpdateProduct(); }}>
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-name">Item Name</label>
                  <input
                    type="text"
                    id="edit-name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Enter product name"
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-description">Description</label>
                  <textarea
                    id="edit-description"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    placeholder="Enter product description"
                    rows={3}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-category_id">Category</label>
                  <select
                    id="edit-category_id"
                    name="category_id"
                    value={formData.category_id}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="">Select Category</option>
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-product_code">Product Code</label>
                  <input
                    type="text"
                    id="edit-product_code"
                    name="product_code"
                    value={formData.product_code}
                    onChange={handleInputChange}
                    placeholder="Enter product code"
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-selling_price">Selling Price</label>
                  <input
                    type="number"
                    id="edit-selling_price"
                    name="selling_price"
                    value={formData.selling_price}
                    onChange={handleInputChange}
                    placeholder="Enter selling price"
                    min="0"
                    step="0.01"
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-purchase_price">Purchase Price</label>
                  <input
                    type="number"
                    id="edit-purchase_price"
                    name="purchase_price"
                    value={formData.purchase_price}
                    onChange={handleInputChange}
                    placeholder="Enter purchase price"
                    min="0"
                    step="0.01"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-quantity_in_stock">Quantity in Stock</label>
                  <input
                    type="number"
                    id="edit-quantity_in_stock"
                    name="quantity_in_stock"
                    value={formData.quantity_in_stock}
                    onChange={handleInputChange}
                    placeholder="Enter quantity"
                    min="0"
                    step="1"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-unit_type">Unit Type</label>
                  <select
                    id="edit-unit_type"
                    name="unit_type"
                    value={formData.unit_type}
                    onChange={handleInputChange}
                  >
                    <option value="piece">Piece</option>
                    <option value="set">Set</option>
                    <option value="cup">Cup</option>
                    <option value="tub">Tub</option>
                    <option value="slice">Slice</option>
                    <option value="serving">Serving</option>
                    <option value="packet">Packet</option>
                    <option value="bottle">Bottle</option>
                    <option value="glass">Glass</option>
                    <option value="scoop">Scoop</option>
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="edit-availability">Availability</label>
                  <select
                    id="edit-availability"
                    name="availability"
                    value={formData.availability}
                    onChange={handleInputChange}
                  >
                    <option value="available">Available</option>
                    <option value="out_of_stock">Out of Stock</option>
                    <option value="discontinued">Discontinued</option>
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group checkbox-group">
                  <label>
                    <input
                      type="checkbox"
                      name="is_unlimited"
                      checked={formData.is_unlimited}
                      onChange={handleInputChange}
                    />
                    Unlimited Item
                  </label>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group checkbox-group">
                  <label>
                    <input
                      type="checkbox"
                      name="is_premium"
                      checked={formData.is_premium}
                      onChange={handleInputChange}
                    />
                    Premium Item
                  </label>
                </div>
              </div>

              <div className="form-actions">
                <button type="button" className="discard-btn" onClick={() => { setShowEditModal(false); setSelectedItem(null); resetForm(); }}>
                  Cancel
                </button>
                <button type="submit" className="add-product-btn">
                  Update Product
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Inventory;

